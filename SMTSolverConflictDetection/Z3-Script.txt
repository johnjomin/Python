import os
import json
from z3 import *

# Define path to load policies
POLICY_FOLDER_PATH = './SamplePolicy/'  # Update this path to your folder containing policy JSON files

def load_policies(path):
    policies = []
    try:
        for file_name in os.listdir(path):
            if file_name.endswith('.json'):
                file_path = os.path.join(path, file_name)
                try:
                    with open(file_path, 'r') as file:
                        policy = json.load(file)
                        policies.append(policy)
                except json.JSONDecodeError:
                    print(f"Error: Failed to parse JSON in file {file_name}")
                except Exception as e:
                    print(f"Error: Failed to read file {file_name} - {e}")
    except FileNotFoundError:
        print(f"Error: The folder '{path}' was not found.")
    except Exception as e:
        print(f"Error: An unexpected error occurred while loading policies - {e}")
    return policies

def parse_logic(policy, s):
    conditions = []
    try:
        for condition in policy['conditions']:
            logic = condition['logic']
            param1 = condition['parameter1']
            param1_name = param1['name']
            param1_value = param1['value1']

            # Determine if value1 is numeric; otherwise treat it as a string
            if param1_value.isdigit():
                s[param1_name] = Int(param1_name)
                value1 = int(param1_value)
            else:
                s[param1_name] = String(param1_name)
                value1 = param1_value

            # Parse individual conditions based on operators
            if "==" in logic:
                conditions.append(s[param1_name] == value1)
            elif "!=" in logic:
                conditions.append(s[param1_name] != value1)
            elif "<" in logic:
                conditions.append(s[param1_name] < value1)
            elif ">" in logic:
                conditions.append(s[param1_name] > value1)
            elif "<=" in logic:
                conditions.append(s[param1_name] <= value1)
            elif ">=" in logic:
                conditions.append(s[param1_name] >= value1)
            
            # Group conditions separately based on AND/OR
            if "AND" in logic:
                conditions = [And(*conditions)]
            elif "OR" in logic:
                conditions = [Or(*conditions)]
    except KeyError as e:
        print(f"Error: Missing key in policy logic - {e}")
    except Exception as e:
        print(f"Error: An unexpected error occurred while parsing logic - {e}")
    return conditions

def check_conflicts(policies):
    conflicts = []
    
    try:
        for i, policy1 in enumerate(policies):
            for j, policy2 in enumerate(policies[i+1:], i+1):
                s = Solver()
                s1 = {param['name']: String(param['name']) for param in policy1['conditions'][0].values() if isinstance(param, dict)}
                s2 = {param['name']: String(param['name']) for param in policy2['conditions'][0].values() if isinstance(param, dict)}

                # Compare each condition from policy1 with policy2
                conditions1 = parse_logic(policy1, s1)
                conditions2 = parse_logic(policy2, s2)
                
                # Check if combined conditions are unsatisfiable
                for cond1 in conditions1:
                    for cond2 in conditions2:
                        s.push()
                        s.add(cond1)
                        s.add(cond2)
                        
                        if s.check() == unsat:
                            conflicts.append((policy1['name'], policy2['name']))
                            break
                        
                        s.pop()  # Only pop if no conflict found here to continue comparisons

    except Exception as e:
        print(f"Error: An unexpected error occurred while checking for conflicts - {e}")

    return conflicts

if __name__ == '__main__':
    policies = load_policies(POLICY_FOLDER_PATH)
    if not policies:
        print("No policies loaded. Please check your policy files.")
    else:
        conflicts = check_conflicts(policies)
        if conflicts:
            print("Conflicts detected between policies:")
            for policy1, policy2 in conflicts:
                print(f" - Conflict between {policy1} and {policy2}")
        else:
            print("No conflicts detected.")
